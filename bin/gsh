#!/usr/bin/env python
#
# Name: 		Global SSH Client
# Description:	help connect ssh between client behind NAT.
#				ssh use paramiko
# project 2
#
# Author: 		Nguyen Thanh Hiep - Nguyen Huu Dinh
# Time: 		2014/10
# Requirements: paramiko, ecdsa
#

import os, sys, getpass
from optparse 	import OptionParser
from optparse 	import OptionGroup
from gsh 		import Request, __version__
request = Request()
def Main():
	parser = OptionParser(description='global ssh help connect ssh behind NAT',
                                   prog='gsh',
                                   version=__version__,
                                   usage='%prog [user@][hostname-mac] [options]')
	group = OptionGroup(parser, "account")
	group.add_option("-s", "--login", action ='store_true', default=False,
        help="login to server")
	group.add_option("-r", "--register", action ='store_true', default=False, 
		help="register new account")
	parser.add_option_group(group)

	group = OptionGroup(parser, "connect")	#create group of parser
	group.add_option("-c", "--connect", metavar="p",
        help="-c [user@]hostname or mac") # add option parser
	group.add_option("-n", "--net", metavar="p",
        help="-n [netname] add network")
	parser.add_option_group(group)

	group = OptionGroup(parser, "infomation")
	group.add_option("-l", "--list", action ='store_true', default=False,
        help="show peer online")
	group.add_option("-g", "--logs", action ='store_true', default=False,
        help="show logs")
	parser.add_option_group(group)

	options, args = parser.parse_args()
	processparser(options)
def superuser():
	if os.geteuid() != 0:
		args = ['sudo', sys.executable] + sys.argv + [os.environ]
		# the next line replaces the currently-running process with the sudo
		os.execlpe('sudo', *args)

def processparser(options):

	if options.register:
		user = raw_input("username: ")		
		pswd = getpass.getpass('Password for %s: ' % user)			
		repswd = getpass.getpass('confirm password: ')
		if pswd != repswd:
			print 'error: confirm password not match!'
			return
		if not request.register(user, pswd):
			os._exit(1)
		return

	if options.login:
		superuser()
		user = raw_input("username: ")	
		pswd = getpass.getpass('Password for %s:' % user)
		if not request.login(user, pswd):
			print "login False"
		return
	if options.connect is not None:		
		request.connect(options.connect)
		return
	if options.net is not None:
		request.addnetwork(options.net)
		return
	if options.list:
		request.listmachine()
		return
	if options.logs:
		request.logs()
		return
	if len(sys.argv) == 1:
		request.listmachine()
	if len(sys.argv) == 2:
		request.connect(sys.argv[1])
if __name__ == "__main__":
	Main()